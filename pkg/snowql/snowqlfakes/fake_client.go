// Code generated by counterfeiter. DO NOT EDIT.
package snowqlfakes

import (
	"sync"

	"github.homedepot.com/cd/cloud-runner/pkg/snowql"
)

type FakeClient struct {
	GetLCPStub        func(string, string) (string, error)
	getLCPMutex       sync.RWMutex
	getLCPArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getLCPReturns struct {
		result1 string
		result2 error
	}
	getLCPReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	WithURLStub        func(string)
	withURLMutex       sync.RWMutex
	withURLArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetLCP(arg1 string, arg2 string) (string, error) {
	fake.getLCPMutex.Lock()
	ret, specificReturn := fake.getLCPReturnsOnCall[len(fake.getLCPArgsForCall)]
	fake.getLCPArgsForCall = append(fake.getLCPArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetLCPStub
	fakeReturns := fake.getLCPReturns
	fake.recordInvocation("GetLCP", []interface{}{arg1, arg2})
	fake.getLCPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetLCPCallCount() int {
	fake.getLCPMutex.RLock()
	defer fake.getLCPMutex.RUnlock()
	return len(fake.getLCPArgsForCall)
}

func (fake *FakeClient) GetLCPCalls(stub func(string, string) (string, error)) {
	fake.getLCPMutex.Lock()
	defer fake.getLCPMutex.Unlock()
	fake.GetLCPStub = stub
}

func (fake *FakeClient) GetLCPArgsForCall(i int) (string, string) {
	fake.getLCPMutex.RLock()
	defer fake.getLCPMutex.RUnlock()
	argsForCall := fake.getLCPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetLCPReturns(result1 string, result2 error) {
	fake.getLCPMutex.Lock()
	defer fake.getLCPMutex.Unlock()
	fake.GetLCPStub = nil
	fake.getLCPReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetLCPReturnsOnCall(i int, result1 string, result2 error) {
	fake.getLCPMutex.Lock()
	defer fake.getLCPMutex.Unlock()
	fake.GetLCPStub = nil
	if fake.getLCPReturnsOnCall == nil {
		fake.getLCPReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getLCPReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) WithURL(arg1 string) {
	fake.withURLMutex.Lock()
	fake.withURLArgsForCall = append(fake.withURLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.WithURLStub
	fake.recordInvocation("WithURL", []interface{}{arg1})
	fake.withURLMutex.Unlock()
	if stub != nil {
		fake.WithURLStub(arg1)
	}
}

func (fake *FakeClient) WithURLCallCount() int {
	fake.withURLMutex.RLock()
	defer fake.withURLMutex.RUnlock()
	return len(fake.withURLArgsForCall)
}

func (fake *FakeClient) WithURLCalls(stub func(string)) {
	fake.withURLMutex.Lock()
	defer fake.withURLMutex.Unlock()
	fake.WithURLStub = stub
}

func (fake *FakeClient) WithURLArgsForCall(i int) string {
	fake.withURLMutex.RLock()
	defer fake.withURLMutex.RUnlock()
	argsForCall := fake.withURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLCPMutex.RLock()
	defer fake.getLCPMutex.RUnlock()
	fake.withURLMutex.RLock()
	defer fake.withURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ snowql.Client = new(FakeClient)
