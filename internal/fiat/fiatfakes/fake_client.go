// Code generated by counterfeiter. DO NOT EDIT.
package fiatfakes

import (
	"sync"

	"github.com/homedepot/cloud-runner/internal/fiat"
)

type FakeClient struct {
	RolesStub        func(string) (fiat.Roles, error)
	rolesMutex       sync.RWMutex
	rolesArgsForCall []struct {
		arg1 string
	}
	rolesReturns struct {
		result1 fiat.Roles
		result2 error
	}
	rolesReturnsOnCall map[int]struct {
		result1 fiat.Roles
		result2 error
	}
	WithURLStub        func(string)
	withURLMutex       sync.RWMutex
	withURLArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Roles(arg1 string) (fiat.Roles, error) {
	fake.rolesMutex.Lock()
	ret, specificReturn := fake.rolesReturnsOnCall[len(fake.rolesArgsForCall)]
	fake.rolesArgsForCall = append(fake.rolesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RolesStub
	fakeReturns := fake.rolesReturns
	fake.recordInvocation("Roles", []interface{}{arg1})
	fake.rolesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) RolesCallCount() int {
	fake.rolesMutex.RLock()
	defer fake.rolesMutex.RUnlock()
	return len(fake.rolesArgsForCall)
}

func (fake *FakeClient) RolesCalls(stub func(string) (fiat.Roles, error)) {
	fake.rolesMutex.Lock()
	defer fake.rolesMutex.Unlock()
	fake.RolesStub = stub
}

func (fake *FakeClient) RolesArgsForCall(i int) string {
	fake.rolesMutex.RLock()
	defer fake.rolesMutex.RUnlock()
	argsForCall := fake.rolesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) RolesReturns(result1 fiat.Roles, result2 error) {
	fake.rolesMutex.Lock()
	defer fake.rolesMutex.Unlock()
	fake.RolesStub = nil
	fake.rolesReturns = struct {
		result1 fiat.Roles
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RolesReturnsOnCall(i int, result1 fiat.Roles, result2 error) {
	fake.rolesMutex.Lock()
	defer fake.rolesMutex.Unlock()
	fake.RolesStub = nil
	if fake.rolesReturnsOnCall == nil {
		fake.rolesReturnsOnCall = make(map[int]struct {
			result1 fiat.Roles
			result2 error
		})
	}
	fake.rolesReturnsOnCall[i] = struct {
		result1 fiat.Roles
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) WithURL(arg1 string) {
	fake.withURLMutex.Lock()
	fake.withURLArgsForCall = append(fake.withURLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.WithURLStub
	fake.recordInvocation("WithURL", []interface{}{arg1})
	fake.withURLMutex.Unlock()
	if stub != nil {
		fake.WithURLStub(arg1)
	}
}

func (fake *FakeClient) WithURLCallCount() int {
	fake.withURLMutex.RLock()
	defer fake.withURLMutex.RUnlock()
	return len(fake.withURLArgsForCall)
}

func (fake *FakeClient) WithURLCalls(stub func(string)) {
	fake.withURLMutex.Lock()
	defer fake.withURLMutex.Unlock()
	fake.WithURLStub = stub
}

func (fake *FakeClient) WithURLArgsForCall(i int) string {
	fake.withURLMutex.RLock()
	defer fake.withURLMutex.RUnlock()
	argsForCall := fake.withURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rolesMutex.RLock()
	defer fake.rolesMutex.RUnlock()
	fake.withURLMutex.RLock()
	defer fake.withURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fiat.Client = new(FakeClient)
